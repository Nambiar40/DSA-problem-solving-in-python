from collections import deque

def minimumMoves(grid, startX, startY, goalX, goalY):
    n = len(grid)
    visited = [[False] * n for _ in range(n)]
    q = deque([(startX, startY, 0)])
    visited[startX][startY] = True
    
    while q:
        x, y, moves = q.popleft()
        
        if (x, y) == (goalX, goalY):
            return moves
        
        for dx, dy in [(1,0), (-1,0), (0,1), (0,-1)]:
            nx, ny = x + dx, y + dy
            while 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == '.':
                if not visited[nx][ny]:
                    visited[nx][ny] = True
                    q.append((nx, ny, moves + 1))
                nx += dx
                ny += dy
